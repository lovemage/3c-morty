import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import helmet from 'helmet';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

// Routes
import authRoutes from './routes/auth.js';
import productRoutes from './routes/products.js';
import cartRoutes from './routes/cart.js';
import orderRoutes from './routes/orders.js';
import userRoutes from './routes/users.js';
import categoryRoutes from './routes/categories.js';
import thirdPartyRoutes from './routes/third-party.js';
import customerInfoRoutes from './routes/customer-info.js';
import adminApiRoutes from './routes/admin-api.js';
import paymentServiceRoutes from './routes/payment-service.js';

// Database - Ëá™ÂãïÈÅ∏Êìá SQLite Êàñ PostgreSQL
import { initializeDatabase } from './database/database-adapter.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Security middleware
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: false
}));

// CORS configuration
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? (process.env.FRONTEND_URL || true) // ÂÖÅË®±ÊâÄÊúâ‰æÜÊ∫êÂ¶ÇÊûúÊ≤íÊúâË®≠ÂÆö FRONTEND_URL
    : ['http://localhost:5173', 'http://localhost:3000', 'http://127.0.0.1:5173'],
  credentials: true
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Static files for product images
app.use('/images', express.static(path.join(__dirname, '../public/images')));

// Serve static files from dist directory in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../dist')));
}

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/products', productRoutes);
app.use('/api/cart', cartRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/users', userRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/third-party', thirdPartyRoutes);
app.use('/api/customer-info', customerInfoRoutes);
app.use('/api/admin', adminApiRoutes);
app.use('/api/payment', paymentServiceRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Corba 3C Shop API is running!',
    timestamp: new Date().toISOString()
  });
});

// Ê¢ùÁ¢ºÁ∂≤È†ÅÊ∏¨Ë©¶È†ÅÈù¢
app.get('/test-barcode', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ê¢ùÁ¢ºÁ∂≤È†ÅÊ∏¨Ë©¶ - Á¨¨‰∏âÊñπAPIÊúçÂãô</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Microsoft JhengHei', sans-serif; 
            max-width: 800px; 
            margin: 30px auto; 
            padding: 20px; 
            background: #f8f9fa;
            line-height: 1.6;
        }
        .container { 
            background: white; 
            padding: 40px; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1); 
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
            border-bottom: 3px solid #3498db;
            padding-bottom: 20px;
        }
        h1 { 
            color: #2c3e50; 
            margin-bottom: 10px;
        }
        .subtitle {
            color: #7f8c8d;
            font-size: 18px;
            margin: 0;
        }
        .section {
            margin: 30px 0;
            padding: 25px;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            background: #f8f9fa;
        }
        .section h3 {
            color: #495057;
            margin-top: 0;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 10px;
        }
        .test-btn { 
            display: inline-block; 
            background: #28a745; 
            color: white; 
            padding: 15px 30px; 
            text-decoration: none; 
            border-radius: 8px; 
            margin: 10px 15px 10px 0; 
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s;
            border: none;
            cursor: pointer;
        }
        .test-btn:hover { 
            background: #218838; 
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .test-btn.secondary {
            background: #6c757d;
        }
        .test-btn.secondary:hover {
            background: #545b62;
        }
        .custom-form { 
            border: 2px dashed #28a745; 
            padding: 25px; 
            border-radius: 10px; 
            margin-top: 20px;
            background: white;
        }
        input[type="number"] { 
            width: 200px; 
            padding: 12px; 
            border: 2px solid #ced4da; 
            border-radius: 6px; 
            margin: 10px;
            font-size: 16px;
        }
        input[type="number"]:focus {
            border-color: #28a745;
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        .warning {
            background: #fff3cd;
            color: #856404;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 5px solid #ffc107;
        }
        .info {
            background: #d1ecf1;
            color: #0c5460;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 5px solid #17a2b8;
        }
        .feature-list {
            list-style: none;
            padding: 0;
        }
        .feature-list li {
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
        }
        .feature-list li:before {
            content: "‚úÖ ";
            margin-right: 10px;
        }
        .url-example {
            background: #e9ecef;
            padding: 15px;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            margin: 10px 0;
            word-break: break-all;
        }
        .loading-section {
            text-align: center;
            padding: 40px;
            background: #f8f9fa;
            border-radius: 10px;
            margin: 20px 0;
        }
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .barcode-result {
            background: #fff;
            border: 2px solid #28a745;
            border-radius: 15px;
            margin: 20px 0;
            padding: 30px;
        }
        .barcode-header {
            background: #28a745;
            color: white;
            padding: 20px;
            margin: -30px -30px 30px -30px;
            border-radius: 13px 13px 0 0;
            text-align: center;
        }
        .barcode-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        .info-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        .info-label {
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
        }
        .info-value {
            color: #212529;
            font-family: 'Courier New', monospace;
        }
        .barcode-segments {
            background: #e3f2fd;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .barcode-segment {
            background: white;
            padding: 15px;
            margin: 10px 0;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            border: 2px dashed #2196f3;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .copy-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }
        .copy-btn:hover {
            background: #218838;
        }
        .barcode-display {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
        }
        .status-pending {
            color: #856404;
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }
        .status-success {
            color: #155724;
            background: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }
        .status-error {
            color: #721c24;
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }
        .refresh-btn {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè™ ‰æøÂà©ÂïÜÂ∫óÊ¢ùÁ¢º‰ªòÊ¨æÊ∏¨Ë©¶</h1>
            <p class="subtitle">Á¨¨‰∏âÊñπAPIÊúçÂãô - Ê¢ùÁ¢ºÁ∂≤È†ÅÂ±ïÁ§∫ÂäüËÉΩ</p>
        </div>
        
        <div class="section">
            <h3>üìã ÂäüËÉΩË™™Êòé</h3>
            <p>Ê≠§Ê∏¨Ë©¶È†ÅÈù¢Â±ïÁ§∫Â¶Ç‰Ωï‰ΩøÁî®Á¨¨‰∏âÊñπAPIÂª∫Á´ã‰æøÂà©ÂïÜÂ∫óÊ¢ùÁ¢º‰ªòÊ¨æÔºå‰∏¶ÁîüÊàêÊ¢ùÁ¢ºÂ±ïÁ§∫Á∂≤È†Å„ÄÇ</p>
            <ul class="feature-list">
                <li>Âª∫Á´ã‰æøÂà©ÂïÜÂ∫óÊ¢ùÁ¢º‰ªòÊ¨æË®ÇÂñÆ</li>
                <li>ÁîüÊàêÂÆåÊï¥ÁöÑÊ¢ùÁ¢ºÂ±ïÁ§∫Á∂≤È†Å</li>
                <li>ÊîØÊè¥Ê¢ùÁ¢ºË§áË£ΩÂíå‰ΩøÁî®Ë™™Êòé</li>
                <li>ÈüøÊáâÂºèË®≠Ë®àÔºåÊîØÊè¥ÊâãÊ©üÁÄèË¶Ω</li>
                <li>Ëá™ÂãïÈáçÊñ∞Êï¥ÁêÜÁ≠âÂæÖÊ¢ùÁ¢ºÁîüÊàê</li>
            </ul>
        </div>
        
        <div class="section">
            <h3>üöÄ Ê¢ùÁ¢ºÊ∏¨Ë©¶</h3>
            <p>Ëº∏ÂÖ•ÈáëÈ°çÂæåÔºåÊ¢ùÁ¢ºÂ∞áÁõ¥Êé•Âú®‰∏ãÊñπÈ°ØÁ§∫Ôºö</p>
            
            <div class="test-form" id="testForm">
                <div style="text-align: center; margin: 20px 0;">
                    <button onclick="createBarcode(100)" class="test-btn">NT$ 100</button>
                    <button onclick="createBarcode(299)" class="test-btn">NT$ 299</button>
                    <button onclick="createBarcode(500)" class="test-btn">NT$ 500</button>
                    <button onclick="createBarcode(1000)" class="test-btn">NT$ 1000</button>
                </div>
                
                <div class="custom-form" style="text-align: center;">
                    <h4>üí∞ Ëá™Ë®ÇÈáëÈ°ç</h4>
                    <input type="number" id="customAmount" placeholder="Ëº∏ÂÖ•ÈáëÈ°ç (1-6000)" min="1" max="6000" style="padding: 10px; margin: 5px; border: 1px solid #ddd; border-radius: 5px;">
                    <button onclick="createCustomBarcode()" class="test-btn">Âª∫Á´ãÊ¢ùÁ¢º</button>
                </div>
            </div>
            
            <!-- ËºâÂÖ•‰∏≠ÁöÑÈ°ØÁ§∫ -->
            <div class="loading-section" id="loadingSection" style="display: none;">
                <div class="loading-spinner"></div>
                <p>Ê≠£Âú®Âª∫Á´ãÊ¢ùÁ¢ºË®ÇÂñÆ...</p>
            </div>
            
            <!-- Ê¢ùÁ¢ºÁµêÊûúÈ°ØÁ§∫ÂçÄÂüü -->
            <div class="barcode-result" id="barcodeResult" style="display: none;"></div>
        </div>
        
        <div class="section">
            <h3>üîó APIÁ´ØÈªûË™™Êòé</h3>
            <p><strong>Ê¢ùÁ¢ºÁ∂≤È†ÅURLÊ†ºÂºèÔºö</strong></p>
            <div class="url-example">
                ${process.env.BASE_URL || 'https://corba3c-production.up.railway.app'}/api/third-party/orders/{Ë®ÇÂñÆID}/barcode/page
            </div>
            
            <p><strong>Êü•Ë©¢ÂèÉÊï∏ÈÅ∏È†ÖÔºö</strong></p>
            <ul>
                <li><code>?theme=default</code> - Ë®≠ÂÆö‰∏ªÈ°åÈ¢®Ê†º</li>
                <li><code>?format=web</code> - Ë®≠ÂÆöÈ°ØÁ§∫Ê†ºÂºè (web/iframe)</li>
                <li><code>?lang=zh-TW</code> - Ë®≠ÂÆöË™ûË®Ä</li>
            </ul>
        </div>
        
        <div class="info">
            <h4>üí° Âª†ÂïÜÊï¥ÂêàË™™Êòé</h4>
            <p>Âª†ÂïÜÂèØ‰ª•ÈÄèÈÅé‰ª•‰∏ãÊñπÂºè‰ΩøÁî®Ê¢ùÁ¢ºÁ∂≤È†ÅÔºö</p>
            <ol>
                <li><strong>Áõ¥Êé•Ë∑≥ËΩâÔºö</strong>Â∞áÁî®Êà∂Â∞éÂêë <code>barcode_page_url</code></li>
                <li><strong>ÂµåÂÖ•iframeÔºö</strong>‰ΩøÁî® <code>barcode_iframe_url</code> ÂµåÂÖ•Ëá™Â∑±ÁöÑÁ∂≤È†Å</li>
                <li><strong>APIÊü•Ë©¢Ôºö</strong>ÂÆöÊúüÊü•Ë©¢ <code>/barcode</code> APIÁç≤ÂèñÊúÄÊñ∞ÁãÄÊÖã</li>
            </ol>
        </div>
        
        <div class="warning">
            <h4>‚ö†Ô∏è Ê∏¨Ë©¶Ê≥®ÊÑè‰∫ãÈ†Ö</h4>
            <ul>
                <li>ÈÄôÊúÉÂª∫Á´ãÁúüÂØ¶ÁöÑÁ∂†ÁïåË®ÇÂñÆÔºå‰ΩÜË´ãÂãøÈÄ≤Ë°åÂØ¶Èöõ‰ªòÊ¨æ</li>
                <li>Ê¢ùÁ¢ºÁîüÊàêÂèØËÉΩÈúÄË¶ÅÂπæÁßíÈêòÊôÇÈñì</li>
                <li>Ê¢ùÁ¢ºÊúâÊïàÊúüÈôêÁÇ∫7Â§©</li>
                <li>Ê∏¨Ë©¶ÂÆåÊàêÂæåÂèØÂøΩÁï•Ê¢ùÁ¢ºÔºåÁ≥ªÁµ±ÊúÉËá™ÂãïÊ∏ÖÁêÜÈÅéÊúüË®ÇÂñÆ</li>
            </ul>
        </div>
        
        <div style="text-align: center; margin-top: 40px;">
            <a href="/test-ecpay" class="test-btn secondary">üîÑ ECPayÂéüÂßãÊ∏¨Ë©¶</a>
            <a href="/test-code39" class="test-btn secondary">üìä Code39Ê¢ùÁ¢ºÊ∏¨Ë©¶</a>
            <a href="/api/health" class="test-btn secondary">üè• Á≥ªÁµ±ÁãÄÊÖã</a>
        </div>
    </div>
    
    <script>
        let currentOrderId = null;
        let pollInterval = null;
        
        // Âª∫Á´ãÊ¢ùÁ¢ºË®ÇÂñÆ
        async function createBarcode(amount) {
            showLoading(true);
            hideResult();
            
            try {
                const timestamp = Date.now();
                const randomId = Math.random().toString(36).substring(2, 10);
                const clientOrderId = \`barcode_test_\${timestamp}_\${randomId}\`;
                
                const response = await fetch('/api/third-party/barcode/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-API-KEY': 'api-key-corba3c-prod-1755101802637fufedw01d8l'
                    },
                    body: JSON.stringify({
                        amount: amount,
                        client_order_id: clientOrderId,
                        callback_url: 'https://webhook.site/test-barcode'
                    })
                });
                
                const result = await response.json();
                console.log('APIÂõûÊáâ:', result);
                
                if (response.ok && result.success) {
                    currentOrderId = result.data.order_id;
                    showResult(result.data);
                    
                    // Â¶ÇÊûúÊ¢ùÁ¢ºÈÇÑÊ≤íÊúâÁîüÊàêÔºåÈñãÂßãËº™Ë©¢
                    if (!result.data.barcode && (!result.data.barcode_segments || 
                        (!result.data.barcode_segments.barcode_1 && !result.data.barcode_segments.barcode_2 && !result.data.barcode_segments.barcode_3))) {
                        startPolling(currentOrderId);
                    }
                } else {
                    showError('APIÂëºÂè´Â§±Êïó: ' + (result.message || 'Êú™Áü•ÈåØË™§'));
                }
            } catch (error) {
                console.error('Âª∫Á´ãÊ¢ùÁ¢ºÂ§±Êïó:', error);
                showError('Âª∫Á´ãÊ¢ùÁ¢ºÂ§±Êïó: ' + error.message);
            }
            
            showLoading(false);
        }
        
        // Ëá™Ë®ÇÈáëÈ°çÂª∫Á´ãÊ¢ùÁ¢º
        function createCustomBarcode() {
            const amountInput = document.getElementById('customAmount');
            const amount = parseInt(amountInput.value);
            
            if (!amount || amount < 1 || amount > 6000) {
                alert('Ë´ãËº∏ÂÖ•1-6000‰πãÈñìÁöÑÈáëÈ°ç');
                return;
            }
            
            createBarcode(amount);
        }
        
        // Ëº™Ë©¢Ê™¢Êü•Ê¢ùÁ¢ºÁãÄÊÖã
        async function startPolling(orderId) {
            if (pollInterval) {
                clearInterval(pollInterval);
            }
            
            console.log('ÈñãÂßãËº™Ë©¢Ë®ÇÂñÆ (‰ΩøÁî®CVSÊü•Ë©¢)', orderId);
            
            let pollCount = 0;
            const maxPolls = 24; // ÊúÄÂ§öËº™Ë©¢2ÂàÜÈêò (24Ê¨° * 5Áßí)
            
            pollInterval = setInterval(async () => {
                try {
                    pollCount++;
                    console.log(\`Ëº™Ë©¢Á¨¨\${pollCount}Ê¨°ÔºåÊ™¢Êü•Ê¢ùÁ¢ºÁãÄÊÖã...\`);
                    
                    // ‰ΩøÁî®Êñ∞ÁöÑrefreshÁ´ØÈªûÔºåÂÆÉÊúÉËá™ÂãïÂü∑Ë°åCVSÊü•Ë©¢
                    const response = await fetch(\`/api/third-party/orders/\${orderId}/barcode/refresh\`, {
                        headers: {
                            'X-API-KEY': 'api-key-corba3c-prod-1755101802637fufedw01d8l'
                        }
                    });
                    
                    const result = await response.json();
                    console.log('Ê¢ùÁ¢ºÊü•Ë©¢ÂõûÊáâ:', result);
                    
                    if (response.ok && result.success) {
                        // Ê™¢Êü•ÊòØÂê¶ÊúâÊ¢ùÁ¢ºÊï∏Êìö
                        if (result.data.barcode || 
                            (result.data.barcode_segments && 
                             (result.data.barcode_segments.barcode_1 || result.data.barcode_segments.barcode_2 || result.data.barcode_segments.barcode_3))) {
                            
                            console.log('Êî∂Âà∞Ê¢ùÁ¢ºÊï∏ÊìöÔºåÂÅúÊ≠¢Ëº™Ë©¢');
                            clearInterval(pollInterval);
                            showResult(result.data);
                            return;
                        }
                    }
                    
                    // Ê™¢Êü•ÊòØÂê¶ÈÅîÂà∞ÊúÄÂ§ßËº™Ë©¢Ê¨°Êï∏
                    if (pollCount >= maxPolls) {
                        console.log('Â∑≤ÈÅîÊúÄÂ§ßËº™Ë©¢Ê¨°Êï∏ÔºåÂÅúÊ≠¢Ëº™Ë©¢');
                        clearInterval(pollInterval);
                        
                        const resultSection = document.getElementById('barcodeResult');
                        resultSection.innerHTML = \`
                            <div class="status-warning">
                                ‚è∞ Ëº™Ë©¢Ë∂ÖÊôÇ - Â∑≤Ëº™Ë©¢\${maxPolls}Ê¨°
                            </div>
                            <div style="margin-top: 15px;">
                                <p>Ê¢ùÁ¢ºË≥áË®äÂ∞öÊú™ÂæûÁ∂†ÁïåÁ≥ªÁµ±ÁîüÊàê„ÄÇÈÄôÂèØËÉΩÊòØÂõ†ÁÇ∫Ôºö</p>
                                <ul style="text-align: left; margin: 10px 0;">
                                    <li>Á∂†ÁïåÈúÄË¶ÅÊ∂àË≤ªËÄÖÂØ¶ÈöõË®™Âïè‰ªòÊ¨æÈ†ÅÈù¢ÊâçÊúÉÁîüÊàêÊ¢ùÁ¢º</li>
                                    <li>Á≥ªÁµ±Ê≠£Âú®ËôïÁêÜ‰∏≠ÔºåË´ãÁ®çÂæåÂÜçË©¶</li>
                                </ul>
                                <button onclick="continuePolling(\${orderId})" style="margin-top: 15px; padding: 10px 20px; background: #3498db; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">
                                    üîÑ ÁπºÁ∫åËº™Ë©¢
                                </button>
                            </div>
                        \`;
                        resultSection.style.display = 'block';
                    }
                } catch (error) {
                    console.error('Ëº™Ë©¢ÈåØË™§:', error);
                    if (pollCount >= maxPolls) {
                        clearInterval(pollInterval);
                        showError('Ëº™Ë©¢Â§±Êïó: ' + error.message);
                    }
                }
            }, 5000); // ÊØè5ÁßíÊ™¢Êü•‰∏ÄÊ¨°
        }
        
        // ÁπºÁ∫åËº™Ë©¢ÂäüËÉΩ
        function continuePolling(orderId) {
            console.log('Áî®Êà∂ÈÅ∏ÊìáÁπºÁ∫åËº™Ë©¢:', orderId);
            const resultSection = document.getElementById('barcodeResult');
            resultSection.innerHTML = \`
                <div class="status-info">
                    üîÑ ÁπºÁ∫åÊü•Ë©¢‰∏≠...
                </div>
                <div style="margin-top: 15px;">
                    <p>Ê≠£Âú®ÈáçÊñ∞Ê™¢Êü•Ê¢ùÁ¢ºÁãÄÊÖã...</p>
                </div>
            \`;
            startPolling(orderId);
        }
        
        // È°ØÁ§∫ËºâÂÖ•‰∏≠
        function showLoading(show) {
            const loadingSection = document.getElementById('loadingSection');
            loadingSection.style.display = show ? 'block' : 'none';
        }
        
        // Èö±ËóèÁµêÊûú
        function hideResult() {
            const resultSection = document.getElementById('barcodeResult');
            resultSection.style.display = 'none';
        }
        
        // È°ØÁ§∫ÁµêÊûú
        function showResult(data) {
            const resultSection = document.getElementById('barcodeResult');
            
            // Ê™¢Êü•Ê¢ùÁ¢ºÁãÄÊÖã
            const hasBarcode = data.barcode || 
                (data.barcode_segments && 
                 (data.barcode_segments.barcode_1 || data.barcode_segments.barcode_2 || data.barcode_segments.barcode_3));
            
            let barcodeContent = '';
            
            if (hasBarcode) {
                // ÊúâÊ¢ùÁ¢ºÊï∏Êìö
                let segments = [];
                if (data.barcode_segments) {
                    if (data.barcode_segments.barcode_1) segments.push(data.barcode_segments.barcode_1);
                    if (data.barcode_segments.barcode_2) segments.push(data.barcode_segments.barcode_2);
                    if (data.barcode_segments.barcode_3) segments.push(data.barcode_segments.barcode_3);
                }
                
                barcodeContent = \`
                    <div class="status-success">
                        ‚úÖ Ê¢ùÁ¢ºÂ∑≤ÁîüÊàêÔºÅË´ãËá≥‰æøÂà©ÂïÜÂ∫ó‰ªòÊ¨æ
                    </div>
                    
                    \${segments.length > 0 ? \`
                        <div class="barcode-segments">
                            <h4>üìä Ê¢ùÁ¢ºÊÆµË≥áË®ä</h4>
                            \${segments.map((segment, index) => \`
                                <div class="barcode-segment">
                                    <span>Á¨¨ \${index + 1} ÊÆµ: \${segment}</span>
                                    <button class="copy-btn" onclick="copyToClipboard('\${segment}')">Ë§áË£Ω</button>
                                </div>
                            \`).join('')}
                            \${data.barcode ? \`
                                <div class="barcode-segment" style="border-color: #28a745;">
                                    <span>ÂÆåÊï¥Ê¢ùÁ¢º: \${data.barcode}</span>
                                    <button class="copy-btn" onclick="copyToClipboard('\${data.barcode}')">Ë§áË£Ω</button>
                                </div>
                            \` : ''}
                        </div>
                    \` : (data.barcode ? \`
                        <div class="barcode-segments">
                            <div class="barcode-segment" style="border-color: #28a745;">
                                <span>Ê¢ùÁ¢º: \${data.barcode}</span>
                                <button class="copy-btn" onclick="copyToClipboard('\${data.barcode}')">Ë§áË£Ω</button>
                            </div>
                        </div>
                    \` : '')}
                \`;
            } else {
                // Ê≤íÊúâÊ¢ùÁ¢ºÊï∏Êìö
                barcodeContent = \`
                    <div class="status-pending">
                        ‚è≥ Ê≠£Âú®Á≠âÂæÖÁ∂†ÁïåÂõûÂÇ≥Ê¢ùÁ¢ºÊï∏Êìö...
                        <br>ÈÄôÈÄöÂ∏∏ÈúÄË¶ÅÂπæÁßíÂà∞ÂπæÂàÜÈêòÊôÇÈñìÔºåÁ≥ªÁµ±ÊúÉËá™ÂãïÊõ¥Êñ∞
                        <br><button class="refresh-btn" onclick="manualRefresh()">ÊâãÂãïÈáçÊñ∞Êï¥ÁêÜ</button>
                    </div>
                \`;
            }
            
            resultSection.innerHTML = \`
                <div class="barcode-header">
                    <h2>üè™ ‰æøÂà©ÂïÜÂ∫óÊ¢ùÁ¢º‰ªòÊ¨æ</h2>
                    <p>Ë®ÇÂñÆÁ∑®Ëôü: \${data.external_order_id}</p>
                </div>
                
                <div class="barcode-info">
                    <div class="info-item">
                        <div class="info-label">Ë®ÇÂñÆID</div>
                        <div class="info-value">\${data.order_id}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">‰ªòÊ¨æÈáëÈ°ç</div>
                        <div class="info-value">NT$ \${data.amount}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Ê¢ùÁ¢ºÁãÄÊÖã</div>
                        <div class="info-value">\${data.barcode_status}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">ÈÅéÊúüÊôÇÈñì</div>
                        <div class="info-value">\${new Date(data.expire_date).toLocaleString('zh-TW')}</div>
                    </div>
                </div>
                
                \${barcodeContent}
                
                <div style="text-align: center; margin-top: 30px;">
                    <a href="\${data.barcode_page_url}" target="_blank" class="test-btn">üè™ ÂÆåÊï¥Ê¢ùÁ¢ºÈ†ÅÈù¢</a>
                    <button onclick="resetTest()" class="test-btn secondary">üîÑ ÈáçÊñ∞Ê∏¨Ë©¶</button>
                </div>
            \`;
            
            resultSection.style.display = 'block';
        }
        
        // È°ØÁ§∫ÈåØË™§
        function showError(message) {
            const resultSection = document.getElementById('barcodeResult');
            resultSection.innerHTML = \`
                <div class="barcode-header" style="background: #dc3545;">
                    <h2>‚ùå Âª∫Á´ãÂ§±Êïó</h2>
                </div>
                <div class="status-error">
                    \${message}
                    <br><button class="refresh-btn" onclick="resetTest()">ÈáçÊñ∞ÂòóË©¶</button>
                </div>
            \`;
            resultSection.style.display = 'block';
        }
        
        // ÊâãÂãïÈáçÊñ∞Êï¥ÁêÜ
        async function manualRefresh() {
            if (currentOrderId) {
                showLoading(true);
                try {
                    const response = await fetch(\`/api/third-party/orders/\${currentOrderId}/barcode\`, {
                        headers: {
                            'X-API-KEY': 'api-key-corba3c-prod-1755101802637fufedw01d8l'
                        }
                    });
                    
                    const result = await response.json();
                    if (response.ok && result.success) {
                        showResult(result.data);
                        
                        // Â¶ÇÊûúÈÇÑÊòØÊ≤íÊúâÊ¢ùÁ¢ºÔºåÁπºÁ∫åËº™Ë©¢
                        const hasBarcode = result.data.barcode || 
                            (result.data.barcode_segments && 
                             (result.data.barcode_segments.barcode_1 || result.data.barcode_segments.barcode_2 || result.data.barcode_segments.barcode_3));
                        
                        if (!hasBarcode) {
                            startPolling(currentOrderId);
                        }
                    }
                } catch (error) {
                    console.error('ÈáçÊñ∞Êï¥ÁêÜÂ§±Êïó:', error);
                }
                showLoading(false);
            }
        }
        
        // ÈáçÁΩÆÊ∏¨Ë©¶
        function resetTest() {
            if (pollInterval) {
                clearInterval(pollInterval);
            }
            currentOrderId = null;
            hideResult();
            showLoading(false);
        }
        
        // Ë§áË£ΩÂà∞Ââ™Ë≤ºÊùø
        function copyToClipboard(text) {
            if (navigator.clipboard) {
                navigator.clipboard.writeText(text).then(function() {
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = 'Â∑≤Ë§áË£Ω!';
                    btn.style.background = '#20c997';
                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.style.background = '#28a745';
                    }, 1500);
                });
            } else {
                // ÈôçÁ¥öÊñπÊ°à
                const textArea = document.createElement("textarea");
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    alert('Â∑≤Ë§áË£ΩÂà∞Ââ™Ë≤ºÊùø');
                } catch (err) {
                    alert('Ë§áË£ΩÂ§±ÊïóÔºåË´ãÊâãÂãïÈÅ∏ÂèñÊñáÂ≠ó');
                }
                document.body.removeChild(textArea);
            }
        }
        
        // Enter ÈçµÊîØÊè¥
        document.getElementById('customAmount').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                createCustomBarcode();
            }
        });
    </script>
</body>
</html>
  `);
});

// ECPay Ê∏¨Ë©¶Ë°®ÂñÆÈÅ∏ÊìáÈ†ÅÈù¢
app.get('/test-ecpay', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ECPay Ê∏¨Ë©¶ - ÈÅ∏ÊìáÈáëÈ°ç</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .amount-btn { 
            display: inline-block; 
            background: #4CAF50; 
            color: white; 
            padding: 15px 25px; 
            text-decoration: none; 
            border-radius: 5px; 
            margin: 10px; 
            font-size: 18px;
            transition: background 0.3s;
        }
        .amount-btn:hover { background: #45a049; }
        h1 { text-align: center; color: #333; }
        p { text-align: center; color: #666; margin: 20px 0; }
        .custom-form { 
            border: 2px dashed #ddd; 
            padding: 20px; 
            border-radius: 10px; 
            margin-top: 30px;
            text-align: center;
        }
        input[type="number"] { 
            width: 200px; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 5px; 
            margin: 0 10px;
            font-size: 16px;
        }
        .custom-btn {
            background: #2196F3;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }
        .custom-btn:hover { background: #1976D2; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üõí ECPay Ê∏¨Ë©¶È†ÅÈù¢</h1>
        <p>ÈÅ∏ÊìáÊ∏¨Ë©¶ÈáëÈ°çÔºåÁ≥ªÁµ±ÊúÉËá™ÂãïÂª∫Á´ãË®ÇÂñÆ‰∏¶Ë∑≥ËΩâÂà∞ECPayÊî∂ÈäÄÂè∞</p>
        
        <div style="text-align: center;">
            <a href="/generate-ecpay-form?amount=199" class="amount-btn">NT$ 199</a>
            <a href="/generate-ecpay-form?amount=299" class="amount-btn">NT$ 299</a>
            <a href="/generate-ecpay-form?amount=499" class="amount-btn">NT$ 499</a>
            <a href="/generate-ecpay-form?amount=999" class="amount-btn">NT$ 999</a>
        </div>
        
        <div class="custom-form">
            <h4>Ëá™Ë®ÇÈáëÈ°ç</h4>
            <form action="/generate-ecpay-form" method="GET" style="display: inline;">
                <input type="number" name="amount" placeholder="Ëº∏ÂÖ•ÈáëÈ°ç" min="1" max="6000" required>
                <button type="submit" class="custom-btn">Âª∫Á´ãË®ÇÂñÆ</button>
            </form>
        </div>
        
        <p style="font-size: 14px; color: #999;">
            ‚ö†Ô∏è ÈÄôÊúÉÂª∫Á´ãÁúüÂØ¶ÁöÑECPayË®ÇÂñÆÔºåË´ãÂãø‰ΩøÁî®ÁúüÂØ¶‰ªòÊ¨æ
        </p>
    </div>
</body>
</html>
  `);
});

// Code39Ê¢ùÁ¢ºÁîüÊàêÊ∏¨Ë©¶È†ÅÈù¢
app.get('/test-code39', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code39Ê¢ùÁ¢ºÁîüÊàêÊ∏¨Ë©¶</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Microsoft JhengHei', sans-serif; 
            max-width: 900px; 
            margin: 30px auto; 
            padding: 20px; 
            background: #f8f9fa;
            line-height: 1.6;
        }
        .container { 
            background: white; 
            padding: 40px; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1); 
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
            border-bottom: 3px solid #28a745;
            padding-bottom: 20px;
        }
        h1 { 
            color: #2c3e50; 
            margin-bottom: 10px;
        }
        .test-section {
            margin: 30px 0;
            padding: 25px;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            background: #f8f9fa;
        }
        .input-group {
            margin: 20px 0;
        }
        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #495057;
        }
        .input-group input, .input-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ced4da;
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
        }
        .input-group input:focus, .input-group textarea:focus {
            border-color: #28a745;
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        .btn { 
            background: #28a745; 
            color: white; 
            padding: 12px 24px; 
            border: none; 
            border-radius: 6px; 
            font-size: 16px;
            cursor: pointer;
            margin: 10px 5px;
            transition: all 0.3s;
        }
        .btn:hover { 
            background: #218838; 
            transform: translateY(-1px);
        }
        .btn.secondary {
            background: #6c757d;
        }
        .btn.secondary:hover {
            background: #545b62;
        }
        .result-section {
            margin: 30px 0;
            padding: 25px;
            border: 2px solid #28a745;
            border-radius: 10px;
            background: white;
            min-height: 150px;
        }
        .barcode-display {
            text-align: center;
            margin: 20px 0;
        }
        .info {
            background: #d1ecf1;
            color: #0c5460;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 5px solid #17a2b8;
        }
        .warning {
            background: #fff3cd;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 5px solid #ffc107;
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid #dee2e6;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border: none;
            background: none;
            font-size: 16px;
            transition: all 0.3s;
        }
        .tab.active {
            border-bottom: 3px solid #28a745;
            color: #28a745;
            font-weight: bold;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Code39Ê¢ùÁ¢ºÁîüÊàêÊ∏¨Ë©¶</h1>
            <p>Ê∏¨Ë©¶Êú¨Âú∞Code39Ê¢ùÁ¢ºÁîüÊàêÂäüËÉΩ</p>
        </div>
        
        <div class="tabs">
            <button class="tab active" onclick="switchTab('single')">ÂñÆÊÆµÊ¢ùÁ¢º</button>
            <button class="tab" onclick="switchTab('multi')">Â§öÊÆµÊ¢ùÁ¢º</button>
            <button class="tab" onclick="switchTab('examples')">ÁØÑ‰æãÊ∏¨Ë©¶</button>
        </div>
        
        <!-- ÂñÆÊÆµÊ¢ùÁ¢ºÊ∏¨Ë©¶ -->
        <div id="singleTab" class="tab-content active">
            <div class="test-section">
                <h3>üî§ ÂñÆÊÆµÊ¢ùÁ¢ºÁîüÊàê</h3>
                <div class="input-group">
                    <label for="singleText">Ê¢ùÁ¢ºÊñáÂ≠ó (ÊîØÊè¥Êï∏Â≠ó„ÄÅÂ§ßÂØ´Â≠óÊØç„ÄÅ-„ÄÅ.„ÄÅÁ©∫Ê†ºÁ≠â):</label>
                    <input type="text" id="singleText" placeholder="‰æãÂ¶Ç: HELLO123" value="HELLO123">
                </div>
                <div class="input-group">
                    <label for="singleWidth">ÂØ¨Â∫¶:</label>
                    <input type="number" id="singleWidth" value="350" min="200" max="600">
                </div>
                <div class="input-group">
                    <label for="singleHeight">È´òÂ∫¶:</label>
                    <input type="number" id="singleHeight" value="100" min="60" max="200">
                </div>
                <button class="btn" onclick="generateSingleBarcode()">ÁîüÊàêÊ¢ùÁ¢º</button>
                <button class="btn secondary" onclick="clearResults()">Ê∏ÖÈô§ÁµêÊûú</button>
            </div>
        </div>
        
        <!-- Â§öÊÆµÊ¢ùÁ¢ºÊ∏¨Ë©¶ -->
        <div id="multiTab" class="tab-content">
            <div class="test-section">
                <h3>üìã Â§öÊÆµÊ¢ùÁ¢ºÁîüÊàê (Ê®°Êì¨Á∂†Áïå‰∏âÊÆµÂºè)</h3>
                <div class="input-group">
                    <label for="segment1">Á¨¨‰∏ÄÊÆµ:</label>
                    <input type="text" id="segment1" placeholder="‰æãÂ¶Ç: 12345" value="12345">
                </div>
                <div class="input-group">
                    <label for="segment2">Á¨¨‰∫åÊÆµ:</label>
                    <input type="text" id="segment2" placeholder="‰æãÂ¶Ç: 67890" value="67890">
                </div>
                <div class="input-group">
                    <label for="segment3">Á¨¨‰∏âÊÆµ:</label>
                    <input type="text" id="segment3" placeholder="‰æãÂ¶Ç: ABCDE" value="ABCDE">
                </div>
                <button class="btn" onclick="generateMultiBarcode()">ÁîüÊàêÂ§öÊÆµÊ¢ùÁ¢º</button>
                <button class="btn secondary" onclick="clearResults()">Ê∏ÖÈô§ÁµêÊûú</button>
            </div>
        </div>
        
        <!-- ÁØÑ‰æãÊ∏¨Ë©¶ -->
        <div id="examplesTab" class="tab-content">
            <div class="test-section">
                <h3>üéØ Âø´ÈÄüÁØÑ‰æãÊ∏¨Ë©¶</h3>
                <p>ÈªûÊìä‰ª•‰∏ãÊåâÈàïÊ∏¨Ë©¶‰∏çÂêåÁöÑÊ¢ùÁ¢ºÊ†ºÂºè:</p>
                <button class="btn" onclick="testExample('TEST123')">Ê∏¨Ë©¶: TEST123</button>
                <button class="btn" onclick="testExample('STORE-001')">Ê∏¨Ë©¶: STORE-001</button>
                <button class="btn" onclick="testExample('PAY 2023')">Ê∏¨Ë©¶: PAY 2023</button>
                <button class="btn" onclick="testMultiExample(['123456', '789012', 'ABC'])">Ê∏¨Ë©¶‰∏âÊÆµÂºè</button>
            </div>
        </div>
        
        <div class="info">
            <h4>üí° Code39Ê†ºÂºèË™™Êòé</h4>
            <ul>
                <li><strong>ÊîØÊè¥Â≠óÁ¨¶:</strong> Êï∏Â≠ó(0-9)„ÄÅÂ§ßÂØ´Â≠óÊØç(A-Z)„ÄÅÁâπÊÆäÁ¨¶Ëôü(-„ÄÅ.„ÄÅÁ©∫Ê†º„ÄÅ$„ÄÅ/„ÄÅ+„ÄÅ%)</li>
                <li><strong>Ê¢ùÁ¢ºÊ†ºÂºè:</strong> Ëá™ÂãïÊ∑ªÂä†Ëµ∑ÂßãÂíåÁµêÊùüÁ¨¶Ëôü(*)</li>
                <li><strong>Áî®ÈÄî:</strong> Ë∂ÖÂïÜÊ¢ùÁ¢ºÊéÉÊèè„ÄÅÂ∫´Â≠òÁÆ°ÁêÜ„ÄÅÁâ©ÊµÅËøΩËπ§</li>
                <li><strong>Âª∫Ë≠∞:</strong> Ê¢ùÁ¢ºÊñáÂ≠ó‰∏çË¶ÅË∂ÖÈÅé20ÂÄãÂ≠óÁ¨¶‰ª•Á¢∫‰øùÂèØËÆÄÊÄß</li>
            </ul>
        </div>
        
        <div class="result-section" id="resultSection">
            <h3>üìä ÁîüÊàêÁµêÊûú</h3>
            <div id="barcodeResult">
                <p style="text-align: center; color: #6c757d;">Ë´ãÂú®‰∏äÊñπÈÅ∏ÊìáÊ∏¨Ë©¶È°ûÂûã‰∏¶ÁîüÊàêÊ¢ùÁ¢º</p>
            </div>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
            <a href="/test-barcode" class="btn secondary">üè™ Ê¢ùÁ¢º‰ªòÊ¨æÊ∏¨Ë©¶</a>
            <a href="/api/health" class="btn secondary">üè• Á≥ªÁµ±ÁãÄÊÖã</a>
        </div>
    </div>
    
    <script>
        function switchTab(tabName) {
            // Èö±ËóèÊâÄÊúâtabÂÖßÂÆπ
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // ÁßªÈô§ÊâÄÊúâtabÁöÑactiveÁãÄÊÖã
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // È°ØÁ§∫ÈÅ∏‰∏≠ÁöÑtab
            document.getElementById(tabName + 'Tab').classList.add('active');
            event.target.classList.add('active');
        }
        
        async function generateSingleBarcode() {
            const text = document.getElementById('singleText').value;
            const width = document.getElementById('singleWidth').value;
            const height = document.getElementById('singleHeight').value;
            
            if (!text.trim()) {
                alert('Ë´ãËº∏ÂÖ•Ê¢ùÁ¢ºÊñáÂ≠ó');
                return;
            }
            
            try {
                showLoading();
                const response = await fetch(\`/api/third-party/barcode/generate/\${encodeURIComponent(text)}?width=\${width}&height=\${height}&format=json\`);
                const result = await response.json();
                
                if (result.success) {
                    displayResult(result.data.svg, \`ÂñÆÊÆµÊ¢ùÁ¢º: \${result.data.text}\`, result.data.warnings);
                } else {
                    displayError(result.message, result.details);
                }
            } catch (error) {
                displayError('ÁîüÊàêÂ§±Êïó', error.message);
            }
        }
        
        async function generateMultiBarcode() {
            const segments = [
                document.getElementById('segment1').value,
                document.getElementById('segment2').value,
                document.getElementById('segment3').value
            ].filter(s => s.trim());
            
            if (segments.length === 0) {
                alert('Ë´ãËá≥Â∞ëËº∏ÂÖ•‰∏ÄÊÆµÊ¢ùÁ¢ºÊñáÂ≠ó');
                return;
            }
            
            try {
                showLoading();
                const response = await fetch('/api/third-party/barcode/generate-multi', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ segments })
                });
                const result = await response.json();
                
                if (result.success) {
                    displayResult(result.data.svg, \`Â§öÊÆµÊ¢ùÁ¢º (\${result.data.segmentCount}ÊÆµ)\`, result.data.warnings);
                } else {
                    displayError(result.message, result.details);
                }
            } catch (error) {
                displayError('ÁîüÊàêÂ§±Êïó', error.message);
            }
        }
        
        function testExample(text) {
            document.getElementById('singleText').value = text;
            switchTab('single');
            document.querySelector('.tab[onclick="switchTab(\'single\')"]').classList.add('active');
            generateSingleBarcode();
        }
        
        function testMultiExample(segments) {
            document.getElementById('segment1').value = segments[0] || '';
            document.getElementById('segment2').value = segments[1] || '';
            document.getElementById('segment3').value = segments[2] || '';
            switchTab('multi');
            document.querySelector('.tab[onclick="switchTab(\'multi\')"]').classList.add('active');
            generateMultiBarcode();
        }
        
        function showLoading() {
            document.getElementById('barcodeResult').innerHTML = '<p style="text-align: center;">‚è≥ Ê≠£Âú®ÁîüÊàêÊ¢ùÁ¢º...</p>';
        }
        
        function displayResult(svg, title, warnings = []) {
            let html = \`<h4>\${title}</h4><div class="barcode-display">\${svg}</div>\`;
            
            if (warnings.length > 0) {
                html += \`<div class="warning"><strong>‚ö†Ô∏è Ë≠¶Âëä:</strong><ul>\${warnings.map(w => \`<li>\${w}</li>\`).join('')}</ul></div>\`;
            }
            
            html += \`<div style="text-align: center; margin-top: 15px;">
                <button class="btn secondary" onclick="downloadCurrentBarcode()">‰∏ãËºâSVG</button>
            </div>\`;
            
            document.getElementById('barcodeResult').innerHTML = html;
        }
        
        function displayError(message, details) {
            let html = \`<div style="color: red; text-align: center;">
                <h4>‚ùå \${message}</h4>\`;
            
            if (details) {
                if (Array.isArray(details)) {
                    html += \`<ul>\${details.map(d => \`<li>\${d}</li>\`).join('')}</ul>\`;
                } else {
                    html += \`<p>\${details}</p>\`;
                }
            }
            
            html += '</div>';
            document.getElementById('barcodeResult').innerHTML = html;
        }
        
        function clearResults() {
            document.getElementById('barcodeResult').innerHTML = '<p style="text-align: center; color: #6c757d;">Ë´ãÂú®‰∏äÊñπÈÅ∏ÊìáÊ∏¨Ë©¶È°ûÂûã‰∏¶ÁîüÊàêÊ¢ùÁ¢º</p>';
        }
        
        function downloadCurrentBarcode() {
            const svg = document.querySelector('#barcodeResult svg');
            if (svg) {
                const svgContent = new XMLSerializer().serializeToString(svg);
                const blob = new Blob([svgContent], { type: 'image/svg+xml' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'code39-barcode.svg';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
        }
    </script>
</body>
</html>
  `);
});

// Ê¢ùÁ¢ºÊ∏¨Ë©¶Á´ØÈªû (Âª∫Á´ãË®ÇÂñÆ‰∏¶Ë∑≥ËΩâÂà∞Ê¢ùÁ¢ºÁ∂≤È†Å)
app.get('/create-test-barcode', async (req, res) => {
  const amount = parseInt(req.query.amount) || 299;
  
  if (amount < 1 || amount > 6000) {
    return res.status(400).send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head><meta charset="UTF-8"><title>ÈåØË™§</title></head>
<body style="font-family: Arial; text-align: center; padding: 50px;">
    <h1 style="color: red;">‚ùå ÈáëÈ°çÈåØË™§</h1>
    <p>ÈáëÈ°çÂøÖÈ†àÂú® 1-6000 ‰πãÈñì</p>
    <a href="/test-barcode" style="color: blue;">ËøîÂõûÊ∏¨Ë©¶È†ÅÈù¢</a>
</body>
</html>
    `);
  }
  
  try {
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(2, 10);
    const clientOrderId = `barcode_test_${timestamp}_${randomId}`;
    
    // Âª∫Á´ãÊ¢ùÁ¢ºË®ÇÂñÆ (Áõ¥Êé•ÂëºÂè´API)
    const apiUrl = 'https://corba3c-production.up.railway.app/api/third-party/barcode/create';
    console.log('ÂëºÂè´Ê¢ùÁ¢ºAPI:', apiUrl);
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-KEY': 'api-key-corba3c-prod-1755101802637fufedw01d8l'
      },
      body: JSON.stringify({
        amount: amount,
        client_order_id: clientOrderId,
        callback_url: 'https://webhook.site/test-barcode'
      })
    });
    
    console.log('Ê¢ùÁ¢ºAPIÂõûÊáâÁãÄÊÖã:', response.status);
    const orderResult = await response.json();
    console.log('Ê¢ùÁ¢ºAPIÂõûÊáâÂÖßÂÆπ:', JSON.stringify(orderResult, null, 2));
    
    if (!response.ok || !orderResult.success) {
      const errorMsg = orderResult.message || `APIÂëºÂè´Â§±Êïó: ${response.status}`;
      console.error('Ê¢ùÁ¢ºAPIÈåØË™§:', errorMsg);
      throw new Error(errorMsg);
    }
    
    // ÂèñÂæóÊ¢ùÁ¢ºÁ∂≤È†ÅURL
    const barcodePageUrl = orderResult.data.barcode_page_url;
    const orderId = orderResult.data.order_id;
    
    // È°ØÁ§∫‰∏≠ÈñìÈ†ÅÈù¢ÔºåÁÑ∂ÂæåË∑≥ËΩâÂà∞Ê¢ùÁ¢ºÁ∂≤È†Å
    res.send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ê¢ùÁ¢ºË®ÇÂñÆÂª∫Á´ãÊàêÂäü</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Microsoft JhengHei', sans-serif; 
            text-align: center; 
            padding: 50px; 
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
        }
        .container {
            background: white;
            color: #2c3e50;
            padding: 50px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            max-width: 600px;
            width: 100%;
        }
        .success-icon {
            font-size: 80px;
            margin-bottom: 30px;
        }
        h1 {
            color: #28a745;
            margin-bottom: 20px;
        }
        .order-info {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            margin: 30px 0;
            text-align: left;
        }
        .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid #dee2e6;
        }
        .info-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }
        .info-label {
            font-weight: bold;
            color: #495057;
        }
        .info-value {
            color: #212529;
        }
        .amount {
            font-size: 18px;
            color: #28a745;
            font-weight: bold;
        }
        .btn { 
            background: #007bff; 
            color: white; 
            padding: 20px 40px; 
            border: none; 
            border-radius: 10px; 
            font-size: 18px; 
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin: 15px;
            transition: all 0.3s;
        }
        .btn:hover { 
            background: #0056b3; 
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .btn.primary {
            background: #28a745;
        }
        .btn.primary:hover {
            background: #1e7e34;
        }
        .countdown {
            font-size: 16px;
            color: #6c757d;
            margin-top: 20px;
        }
        .api-info {
            background: #e9ecef;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            font-size: 14px;
            text-align: left;
        }
        .api-info code {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="success-icon">‚úÖ</div>
        <h1>Ê¢ùÁ¢ºË®ÇÂñÆÂª∫Á´ãÊàêÂäüÔºÅ</h1>
        <p>Á≥ªÁµ±Â∑≤ÊàêÂäüÂª∫Á´ã‰æøÂà©ÂïÜÂ∫óÊ¢ùÁ¢º‰ªòÊ¨æË®ÇÂñÆ</p>
        
        <div class="order-info">
            <div class="info-row">
                <span class="info-label">Ë®ÇÂñÆÁ∑®Ëôü:</span>
                <span class="info-value">${orderResult.data.client_order_id}</span>
            </div>
            <div class="info-row">
                <span class="info-label">ÂÖßÈÉ®ID:</span>
                <span class="info-value">${orderId}</span>
            </div>
            <div class="info-row">
                <span class="info-label">‰ªòÊ¨æÈáëÈ°ç:</span>
                <span class="info-value amount">NT$ ${amount}</span>
            </div>
            <div class="info-row">
                <span class="info-label">‰ªòÊ¨æÊñπÂºè:</span>
                <span class="info-value">7-ELEVENÊ¢ùÁ¢º‰ªòÊ¨æ</span>
            </div>
            <div class="info-row">
                <span class="info-label">Ë®ÇÂñÆÁãÄÊÖã:</span>
                <span class="info-value">${orderResult.data.barcode_status || 'pending'}</span>
            </div>
        </div>
        
        <div class="api-info">
            <h4>üîó APIÂõûÊáâË≥áË®ä</h4>
            <p><strong>Ê¢ùÁ¢ºÁ∂≤È†ÅURL:</strong></p>
            <code>${barcodePageUrl}</code>
            <p style="margin-top: 10px;"><strong>‰ªòÊ¨æÊñπÂºè:</strong> ${orderResult.data.payment_method || 'ecpay_redirect'}</p>
        </div>
        
        <div>
            <a href="${barcodePageUrl}" class="btn primary">üè™ Êü•ÁúãÊ¢ùÁ¢º‰ªòÊ¨æÈ†ÅÈù¢</a>
            <a href="/test-barcode-api/${orderId}" class="btn">üìã Êü•ÁúãAPIË≥áÊñô</a>
        </div>
        
        <div>
            <a href="/test-barcode" class="btn">üîÑ Âª∫Á´ãÂè¶‰∏ÄÂÄãÊ∏¨Ë©¶</a>
        </div>
        
        <div class="countdown" id="countdown">
            <span id="timer">5</span> ÁßíÂæåËá™ÂãïË∑≥ËΩâÂà∞Ê¢ùÁ¢ºÈ†ÅÈù¢...
        </div>
    </div>
    
    <script>
        let seconds = 5;
        const timerElement = document.getElementById('timer');
        const countdownElement = document.getElementById('countdown');
        
        const countdown = setInterval(() => {
            seconds--;
            timerElement.textContent = seconds;
            
            if (seconds <= 0) {
                clearInterval(countdown);
                countdownElement.textContent = 'Ê≠£Âú®Ë∑≥ËΩâ...';
                window.location.href = '${barcodePageUrl}';
            }
        }, 1000);
        
        // ÈªûÊìä‰ªª‰ΩïÂú∞ÊñπÂèñÊ∂àËá™ÂãïË∑≥ËΩâ
        document.addEventListener('click', () => {
            clearInterval(countdown);
            countdownElement.textContent = 'Ëá™ÂãïË∑≥ËΩâÂ∑≤ÂèñÊ∂àÔºåË´ãÊâãÂãïÈªûÊìäÊåâÈàï';
        });
    </script>
</body>
</html>
    `);
    
  } catch (error) {
    console.error('Âª∫Á´ãÊ¢ùÁ¢ºÊ∏¨Ë©¶Â§±Êïó:', error);
    res.status(500).send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head><meta charset="UTF-8"><title>ÈåØË™§</title></head>
<body style="font-family: Arial; text-align: center; padding: 50px;">
    <h1 style="color: red;">‚ùå Âª∫Á´ãÊ¢ùÁ¢ºË®ÇÂñÆÂ§±Êïó</h1>
    <p>${error.message}</p>
    <p style="font-size: 14px; color: #666;">Ë´ãÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑öÊàñÁ®çÂæåÂÜçË©¶</p>
    <a href="/test-barcode" style="color: blue;">ËøîÂõûÊ∏¨Ë©¶È†ÅÈù¢</a>
</body>
</html>
    `);
  }
});

// Ê∏¨Ë©¶Áî®APIË≥áÊñôÊü•ÁúãÁ´ØÈªû (‰∏çÈúÄË¶ÅAPI Key)
app.get('/test-barcode-api/:orderId', async (req, res) => {
  try {
    const { orderId } = req.params;
    
    // ‰ΩøÁî®Ê∏¨Ë©¶API KeyÂëºÂè´API
    const apiUrl = `https://corba3c-production.up.railway.app/api/third-party/orders/${orderId}/barcode`;
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'X-API-KEY': 'api-key-corba3c-prod-1755101802637fufedw01d8l'
      }
    });
    
    const data = await response.json();
    
    // Áî¢ÁîüÁæéÂåñÁöÑAPIË≥áÊñôÈ†ÅÈù¢
    res.send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ê¢ùÁ¢ºAPIË≥áÊñô - Ë®ÇÂñÆ ${orderId}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Microsoft JhengHei', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: #2c3e50;
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 { font-size: 24px; margin-bottom: 10px; }
        .status { 
            display: inline-block; 
            padding: 8px 16px; 
            border-radius: 20px; 
            font-size: 14px; 
            font-weight: bold; 
            margin-top: 10px;
        }
        .status.success { background: #27ae60; color: white; }
        .status.pending { background: #f39c12; color: white; }
        .status.error { background: #e74c3c; color: white; }
        .content { padding: 30px; }
        .json-container {
            background: #2d3748;
            color: #e2e8f0;
            padding: 25px;
            border-radius: 10px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            white-space: pre-wrap;
            overflow-x: auto;
            line-height: 1.6;
        }
        .back-btn {
            display: inline-block;
            background: #3498db;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 6px;
            margin: 10px 5px 0 0;
            transition: background 0.3s;
        }
        .back-btn:hover { background: #2980b9; }
        .secondary { background: #6c757d; }
        .secondary:hover { background: #545b62; }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .info-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #3498db;
        }
        .info-card h4 { color: #2c3e50; margin-bottom: 10px; }
        .info-card p { color: #495057; margin: 5px 0; }
        .barcode-segments {
            background: #e3f2fd;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .segment {
            background: white;
            padding: 15px;
            margin: 10px 0;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: #2c3e50;
            border: 2px dashed #3498db;
        }
        .copy-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìã Ê¢ùÁ¢ºAPIË≥áÊñô</h1>
            <div class="status ${response.ok && data.success ? 'success' : 'error'}">
                ${response.ok && data.success ? '‚úÖ APIÊàêÂäü' : '‚ùå APIÈåØË™§'}
            </div>
        </div>
        
        <div class="content">
            ${response.ok && data.success ? `
                <div class="info-grid">
                    <div class="info-card">
                        <h4>üì¶ Ë®ÇÂñÆË≥áË®ä</h4>
                        <p><strong>Ë®ÇÂñÆID:</strong> ${data.data.order_id}</p>
                        <p><strong>Â§ñÈÉ®ID:</strong> ${data.data.external_order_id}</p>
                        <p><strong>ÈáëÈ°ç:</strong> NT$ ${data.data.amount}</p>
                        <p><strong>ÂïÜÂìÅ:</strong> ${data.data.product_info}</p>
                    </div>
                    
                    <div class="info-card">
                        <h4>üè™ Ê¢ùÁ¢ºÁãÄÊÖã</h4>
                        <p><strong>ÁãÄÊÖã:</strong> ${data.data.barcode_status}</p>
                        <p><strong>Âª∫Á´ãÊôÇÈñì:</strong> ${new Date(data.data.created_at).toLocaleString('zh-TW')}</p>
                        <p><strong>Êõ¥Êñ∞ÊôÇÈñì:</strong> ${new Date(data.data.updated_at).toLocaleString('zh-TW')}</p>
                        <p><strong>ÈÅéÊúüÊôÇÈñì:</strong> ${data.data.expire_date ? new Date(data.data.expire_date).toLocaleString('zh-TW') : 'Êú™Ë®≠ÂÆö'}</p>
                    </div>
                    
                    <div class="info-card">
                        <h4>üîó Áõ∏ÈóúÈÄ£Áµê</h4>
                        <p><a href="${data.data.barcode_page_url}" target="_blank" style="color: #007bff;">Ê¢ùÁ¢ºÈ†ÅÈù¢</a></p>
                        <p><a href="${data.data.barcode_iframe_url}" target="_blank" style="color: #007bff;">iframeÁâàÊú¨</a></p>
                    </div>
                    
                    <div class="info-card">
                        <h4>üí≥ Á∂†ÁïåË≥áË®ä</h4>
                        <p><strong>ÂïÜÂÆ∂Á∑®Ëôü:</strong> ${data.data.merchant_trade_no}</p>
                        <p><strong>‰∫§ÊòìÁ∑®Ëôü:</strong> ${data.data.trade_no || 'Â∞öÊú™Áî¢Áîü'}</p>
                        <p><strong>Ë®ÇÂñÆÁãÄÊÖã:</strong> ${data.data.order_status}</p>
                    </div>
                </div>
                
                ${data.data.barcode_segments && (data.data.barcode_segments.barcode_1 || data.data.barcode_segments.barcode_2 || data.data.barcode_segments.barcode_3) ? `
                    <div class="barcode-segments">
                        <h4>üìä Ê¢ùÁ¢ºÊÆµË≥áË®ä</h4>
                        ${data.data.barcode_segments.barcode_1 ? `
                            <div class="segment">
                                Á¨¨1ÊÆµ: ${data.data.barcode_segments.barcode_1}
                                <button class="copy-btn" onclick="copyToClipboard('${data.data.barcode_segments.barcode_1}')">Ë§áË£Ω</button>
                            </div>
                        ` : ''}
                        ${data.data.barcode_segments.barcode_2 ? `
                            <div class="segment">
                                Á¨¨2ÊÆµ: ${data.data.barcode_segments.barcode_2}
                                <button class="copy-btn" onclick="copyToClipboard('${data.data.barcode_segments.barcode_2}')">Ë§áË£Ω</button>
                            </div>
                        ` : ''}
                        ${data.data.barcode_segments.barcode_3 ? `
                            <div class="segment">
                                Á¨¨3ÊÆµ: ${data.data.barcode_segments.barcode_3}
                                <button class="copy-btn" onclick="copyToClipboard('${data.data.barcode_segments.barcode_3}')">Ë§áË£Ω</button>
                            </div>
                        ` : ''}
                        ${data.data.barcode ? `
                            <div class="segment" style="border-color: #28a745;">
                                ÂÆåÊï¥Ê¢ùÁ¢º: ${data.data.barcode}
                                <button class="copy-btn" onclick="copyToClipboard('${data.data.barcode}')">Ë§áË£Ω</button>
                            </div>
                        ` : ''}
                    </div>
                ` : '<div class="info-card"><h4>‚è≥ Á≠âÂæÖÊ¢ùÁ¢º</h4><p>Ê¢ùÁ¢ºÂ∞öÊú™ÁîüÊàêÔºåË´ãÁ®çÂæåÈáçÊñ∞Êï¥ÁêÜ</p></div>'}
                
                <h4>üîß ÂÆåÊï¥APIÂõûÊáâ</h4>
            ` : ''}
            
            <div class="json-container">${JSON.stringify(data, null, 2)}</div>
            
            <div>
                <a href="javascript:history.back()" class="back-btn">üîô ËøîÂõû</a>
                <a href="/test-barcode" class="back-btn secondary">üß™ Êñ∞Ê∏¨Ë©¶</a>
                <a href="${response.ok && data.success && data.data.barcode_page_url ? data.data.barcode_page_url : '#'}" class="back-btn">üè™ Ê¢ùÁ¢ºÈ†ÅÈù¢</a>
                <button onclick="location.reload()" class="back-btn secondary">üîÑ ÈáçÊñ∞Êï¥ÁêÜ</button>
            </div>
        </div>
    </div>
    
    <script>
        function copyToClipboard(text) {
            if (navigator.clipboard) {
                navigator.clipboard.writeText(text).then(function() {
                    // Á∞°ÂñÆÁöÑÊèêÁ§∫
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = 'Â∑≤Ë§áË£Ω!';
                    btn.style.background = '#20c997';
                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.style.background = '#28a745';
                    }, 1500);
                });
            } else {
                alert('Ë§áË£ΩÂäüËÉΩ‰∏çÊîØÊè¥ÔºåË´ãÊâãÂãïÈÅ∏ÂèñÊñáÂ≠ó');
            }
        }
    </script>
</body>
</html>
    `);

  } catch (error) {
    console.error('APIË≥áÊñôÊü•Ë©¢ÈåØË™§:', error);
    res.status(500).send(`
<!DOCTYPE html>
<html>
<head><meta charset="UTF-8"><title>ÈåØË™§</title></head>
<body style="font-family: Arial; text-align: center; padding: 50px;">
    <h1 style="color: red;">‚ùå Êü•Ë©¢Â§±Êïó</h1>
    <p>ÁÑ°Ê≥ïÁç≤ÂèñAPIË≥áÊñô: ${error.message}</p>
    <a href="/test-barcode" style="color: blue;">ËøîÂõûÊ∏¨Ë©¶È†ÅÈù¢</a>
</body>
</html>
    `);
  }
});

// Ê∏¨Ë©¶Áî®APIË≥áÊñôÊü•ÁúãÁ´ØÈªû - ‰ΩøÁî®CVSÊü•Ë©¢ÂäüËÉΩ (‰∏çÈúÄË¶ÅAPI Key)
app.get('/test-barcode-api/:orderId/refresh', async (req, res) => {
  try {
    const { orderId } = req.params;
    
    // ‰ΩøÁî®Ê∏¨Ë©¶API KeyÂëºÂè´refreshÁ´ØÈªû
    const apiUrl = `https://corba3c-production.up.railway.app/api/third-party/orders/${orderId}/barcode/refresh`;
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'X-API-KEY': 'api-key-corba3c-prod-1755101802637fufedw01d8l'
      }
    });
    
    const data = await response.json();
    res.json(data);
    
  } catch (error) {
    console.error('Êü•Ë©¢Ê¢ùÁ¢ºÂà∑Êñ∞Â§±Êïó:', error);
    res.status(500).json({
      error: true,
      message: 'Êü•Ë©¢Â§±Êïó: ' + error.message
    });
  }
});

// ECPay Ë°®ÂñÆÁîüÊàêÁ´ØÈªû (‰º∫ÊúçÂô®Á´ØËôïÁêÜ)
app.get('/generate-ecpay-form', async (req, res) => {
  const amount = parseInt(req.query.amount) || 299;
  
  if (amount < 1 || amount > 6000) {
    return res.status(400).send('ÈáëÈ°çÂøÖÈ†àÂú® 1-6000 ‰πãÈñì');
  }
  
  try {
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(2, 10);
    const clientOrderId = `server_test_${timestamp}_${randomId}`;
    
    // ÁîüÊàêÊõ¥ÂîØ‰∏ÄÁöÑÂïÜÂÆ∂‰∫§ÊòìÁ∑®Ëôü
    const uniqueTimestamp = Date.now().toString();
    const uniqueRandom = Math.random().toString(36).substring(2, 8).toUpperCase();
    const merchantTradeNo = `TEST${uniqueTimestamp.slice(-10)}${uniqueRandom}`;
    
    // Âª∫Á´ãË®ÇÂñÆ (Áõ¥Êé•ÂëºÂè´API) - ‰ΩøÁî®ÁµïÂ∞çURLÁ¢∫‰øùÊ≠£Á¢∫
    const apiUrl = 'https://corba3c-production.up.railway.app/api/third-party/barcode/create';
    console.log('ÂëºÂè´API:', apiUrl);
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-KEY': 'api-key-corba3c-prod-1755101802637fufedw01d8l'
      },
      body: JSON.stringify({
        amount: amount,
        client_order_id: clientOrderId,
        callback_url: 'https://webhook.site/test'
      })
    });
    
    console.log('APIÂõûÊáâÁãÄÊÖã:', response.status);
    const orderResult = await response.json();
    console.log('APIÂõûÊáâÂÖßÂÆπ:', JSON.stringify(orderResult, null, 2));
    
    if (!response.ok || !orderResult.success) {
      const errorMsg = orderResult.message || `APIÂëºÂè´Â§±Êïó: ${response.status}`;
      console.error('APIÈåØË™§:', errorMsg);
      throw new Error(errorMsg);
    }
    
    // ÁîüÊàêÁ¥îHTMLË°®ÂñÆÈ†ÅÈù¢ (ÁÑ°JavaScript)
    const ecpayForm = orderResult.data.ecpay_form;
    let hiddenInputs = '';
    
    Object.entries(ecpayForm.params).forEach(([key, value]) => {
      hiddenInputs += `<input type="hidden" name="${key}" value="${value}">`;
    });
    
    res.send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ë∑≥ËΩâÂà∞ECPayÊî∂ÈäÄÂè∞</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            padding: 50px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .container {
            background: white;
            color: #333;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            display: inline-block;
            min-width: 400px;
        }
        .btn { 
            background: #FF5722; 
            color: white; 
            padding: 20px 40px; 
            border: none; 
            border-radius: 8px; 
            font-size: 20px; 
            cursor: pointer;
            transition: all 0.3s;
        }
        .btn:hover { 
            background: #E64A19; 
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .info { 
            background: #e8f5e8; 
            padding: 20px; 
            border-radius: 8px; 
            margin: 20px 0;
            border-left: 5px solid #4CAF50;
        }
        .warning {
            background: #fff3cd;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 5px solid #ffc107;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Ê∫ñÂÇôË∑≥ËΩâÂà∞ECPay</h1>
        
        <div class="info">
            <h3>üìã Ë®ÇÂñÆË≥áË®ä</h3>
            <p><strong>ÈáëÈ°çÔºö</strong>NT$ ${amount}</p>
            <p><strong>ÂïÜÂìÅÔºö</strong>‰º∫ÊúçÂô®Ê∏¨Ë©¶ÂïÜÂìÅ</p>
            <p><strong>‰ªòÊ¨æÊñπÂºèÔºö</strong>7-ELEVENÊ¢ùÁ¢º‰ªòÊ¨æ</p>
        </div>
        
        <div class="warning">
            <strong>‚ö†Ô∏è Ê≥®ÊÑèÔºö</strong>ÈÄôÊúÉË∑≥ËΩâÂà∞ÁúüÂØ¶ÁöÑECPayÈ†ÅÈù¢ÔºåË´ãÂãøÈÄ≤Ë°åÂØ¶Èöõ‰ªòÊ¨æ
        </div>
        
        <form method="${ecpayForm.method}" action="${ecpayForm.action}">
            ${hiddenInputs}
            <button type="submit" class="btn">üí≥ Ë∑≥ËΩâÂà∞ ECPay Êî∂ÈäÄÂè∞</button>
        </form>
        
        <p style="margin-top: 30px; color: #666; font-size: 14px;">
            ÈªûÊìä‰∏äÊñπÊåâÈàïÂ∞áË∑≥ËΩâÂà∞ECPayÂÆòÊñπÊî∂ÈäÄÂè∞È†ÅÈù¢
        </p>
    </div>
</body>
</html>
    `);
    
  } catch (error) {
    console.error('ÁîüÊàêECPayË°®ÂñÆÂ§±Êïó:', error);
    res.status(500).send(`
<!DOCTYPE html>
<html lang="zh-TW">
<head><meta charset="UTF-8"><title>ÈåØË™§</title></head>
<body style="font-family: Arial; text-align: center; padding: 50px;">
    <h1 style="color: red;">‚ùå Âª∫Á´ãË®ÇÂñÆÂ§±Êïó</h1>
    <p>${error.message}</p>
    <a href="/test-ecpay" style="color: blue;">ËøîÂõûÊ∏¨Ë©¶È†ÅÈù¢</a>
</body>
</html>
    `);
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(err.status || 500).json({
    error: true,
    message: err.message || '‰º∫ÊúçÂô®ÂÖßÈÉ®ÈåØË™§',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// SPA fallback for production - serve index.html for non-API routes
if (process.env.NODE_ENV === 'production') {
  app.get('*', (req, res) => {
    // If it's an API route, return 404 JSON
    if (req.path.startsWith('/api/')) {
      res.status(404).json({
        error: true,
        message: 'Êâæ‰∏çÂà∞Ë´ãÊ±ÇÁöÑAPIÁ´ØÈªû'
      });
    } else {
      // For all other routes, serve the React app
      res.sendFile(path.join(__dirname, '../dist/index.html'));
    }
  });
} else {
  // 404 handler for development
  app.use('*', (req, res) => {
    res.status(404).json({
      error: true,
      message: 'Êâæ‰∏çÂà∞Ë´ãÊ±ÇÁöÑAPIÁ´ØÈªû'
    });
  });
}

// Initialize database and start server
const startServer = async () => {
  try {
    console.log('üîß ÂàùÂßãÂåñÊï∏ÊìöÂ∫´...');
    console.log('üåê Áí∞Â¢ÉËÆäÊï∏Ê™¢Êü•:');
    console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
    console.log(`   PORT: ${PORT}`);
    console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ Â∑≤Ë®≠ÂÆö' : '‚ùå Êú™Ë®≠ÂÆö'}`);
    console.log(`   BASE_URL: ${process.env.BASE_URL || 'Êú™Ë®≠ÂÆö'}`);
    
    await initializeDatabase();
    console.log('‚úÖ Êï∏ÊìöÂ∫´ÂàùÂßãÂåñÂÆåÊàê');
    
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log('üöÄ Corba 3C Shop API Server Ê≠£Âú®ÈÅãË°å');
      console.log(`üìç Server: http://0.0.0.0:${PORT}`);
      console.log(`üè• Health: http://0.0.0.0:${PORT}/api/health`);
      console.log(`üß™ Barcode Test: http://0.0.0.0:${PORT}/test-barcode`);
      console.log(`üõçÔ∏è Áí∞Â¢É: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üåê CORS Origin: ${process.env.NODE_ENV === 'production' ? (process.env.FRONTEND_URL || 'all origins') : 'development origins'}`);
      console.log(`üìÅ Dist directory exists: ${fs.existsSync(path.join(__dirname, '../dist'))}`);
      console.log(`üìÑ Index.html exists: ${fs.existsSync(path.join(__dirname, '../dist/index.html'))}`);
    });
    
    // ËôïÁêÜÊúçÂãôÂô®ÈåØË™§
    server.on('error', (error) => {
      console.error('‚ùå ÊúçÂãôÂô®ÈåØË™§:', error);
      if (error.code === 'EADDRINUSE') {
        console.error(`‚ùå Á´ØÂè£ ${PORT} Â∑≤Ë¢´‰ΩøÁî®`);
      }
      process.exit(1);
    });
    
  } catch (error) {
    console.error('‚ùå ÊúçÂãôÂô®ÂïüÂãïÂ§±Êïó:', error);
    console.error('ÈåØË™§Ë©≥ÊÉÖ:', error.stack);
    process.exit(1);
  }
};

startServer();

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üì¥ Êî∂Âà∞SIGTERM‰ø°ËôüÔºåÊ≠£Âú®ÈóúÈñâÊúçÂãôÂô®...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üì¥ Êî∂Âà∞SIGINT‰ø°ËôüÔºåÊ≠£Âú®ÈóúÈñâÊúçÂãôÂô®...');
  process.exit(0);
}); 